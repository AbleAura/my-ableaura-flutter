name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_ios:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
          cache: true

      - name: Setup environment
        run: |
          flutter --version
          flutter doctor -v
          flutter precache --ios

      - name: Create environment files
        env:
          DEV_ENV: ${{ secrets.DEV_ENV_FILE }}
          PROD_ENV: ${{ secrets.PROD_ENV_FILE }}
        run: |
          mkdir -p assets
          echo "$DEV_ENV" > assets/.env.dev
          echo "$PROD_ENV" > assets/.env.prod

      - name: Install Flutter dependencies
        run: |
          flutter clean
          flutter pub get

      - name: Setup iOS project
        run: |
          # Remove existing iOS folder and recreate it
          rm -rf ios
          flutter create --platforms ios .
          flutter pub get
          
          # Ensure Flutter.podspec is available
          mkdir -p ios/Flutter
          flutter build ios-framework --xcframework --no-universal
          
          # Create symbolic link to Flutter framework
          mkdir -p ios/Flutter/Debug
          mkdir -p ios/Flutter/Release
          ln -sf ../../build/ios/framework/Debug/Flutter.xcframework ios/Flutter/Debug/Flutter.framework
          ln -sf ../../build/ios/framework/Release/Flutter.xcframework ios/Flutter/Release/Flutter.framework

      - name: Update Podfile
        run: |
          cat << EOF > ios/Podfile
          platform :ios, '12.0'
          
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'
          
          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }
          
          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            end
          
            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}"
          end
          
          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
          
          flutter_ios_podfile_setup
          
          target 'Runner' do
            use_frameworks!
            use_modular_headers!
          
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
            
            post_install do |installer|
              installer.pods_project.targets.each do |target|
                flutter_additional_ios_build_settings(target)
                target.build_configurations.each do |config|
                  config.build_settings['ENABLE_BITCODE'] = 'NO'
                  config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
                  
                  # Preprocessor definitions for permissions
                  config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
                    '$(inherited)',
                    'PERMISSION_CAMERA=1',
                    'PERMISSION_PHOTOS=1',
                    'PERMISSION_LOCATION=1'
                  ]
                end
              end
            end
          end
          EOF

      - name: Clean Pods
        run: |
          cd ios
          rm -rf Pods
          rm -rf Podfile.lock
          pod cache clean --all
          pod deintegrate
          pod repo update
          cd ..

      - name: Install CocoaPods
        run: |
          gem install cocoapods
          cd ios
          pod install --repo-update
          cd ..

      - name: Verify Flutter Setup
        run: |
          cd ios
          test -d Flutter/Debug/Flutter.framework || echo "Flutter framework missing in Debug"
          test -d Flutter/Release/Flutter.framework || echo "Flutter framework missing in Release"
          test -f Flutter/Generated.xcconfig || echo "Generated.xcconfig missing"
          cd ..

      - name: Update project settings
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          cd ios
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:IPHONEOS_DEPLOYMENT_TARGET 12.0" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:DEVELOPMENT_TEAM $TEAM_ID" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:PRODUCT_BUNDLE_IDENTIFIER $BUNDLE_ID" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:CODE_SIGN_STYLE Manual" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          cd ..

      - name: Install provisioning profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          PP_PATH=$RUNNER_TEMP/profile.mobileprovision
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $PP_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Import signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build iOS
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          flutter build ios --release --no-codesign
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            clean archive \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER"

      - name: Archive and export IPA
        env:
          EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}
        run: |
          EXPORT_OPTIONS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode > $EXPORT_OPTIONS_PATH
          
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            -exportOptionsPlist $EXPORT_OPTIONS_PATH \
            -exportPath $RUNNER_TEMP/build \
            -allowProvisioningUpdates

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: release-ipa
          path: ${{ runner.temp }}/build/*.ipa
          retention-days: 5
