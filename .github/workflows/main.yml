name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_ios:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
          cache: true

      - name: Setup tools
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          sudo gem install cocoapods -v 1.15.2

      - name: Create environment files
        env:
          DEV_ENV: ${{ secrets.DEV_ENV_FILE }}
          PROD_ENV: ${{ secrets.PROD_ENV_FILE }}
        run: |
          mkdir -p assets
          echo "$DEV_ENV" > assets/.env.dev
          echo "$PROD_ENV" > assets/.env.prod

      - name: Setup iOS project
        run: |
          # Save current directory contents
          mkdir -p temp_backup
          cp -r * temp_backup/ 2>/dev/null || true
          
          # Clean directory but keep backup
          find . -maxdepth 1 ! -name 'temp_backup' ! -name '.' ! -name '.git' -exec rm -rf {} +
          
          # Create new Flutter project with correct name
          flutter create --project-name my_ableaura_flutter .
          
          # Restore original files but keep new iOS directory
          cp -r temp_backup/lib . 2>/dev/null || true
          cp -r temp_backup/assets . 2>/dev/null || true
          cp temp_backup/pubspec.yaml . 2>/dev/null || true
          rm -rf temp_backup
          
          # Get dependencies
          flutter pub get

      - name: Update Podfile
        run: |
          cat > ios/Podfile << 'EOL'
          platform :ios, '13.0'
          
          install! 'cocoapods', :deterministic_uuids => false
          
          target 'Runner' do
            use_frameworks!
            use_modular_headers!
            
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
            
            pod 'Firebase/Core'
            pod 'Firebase/Auth'
            pod 'Firebase/Messaging'
            pod 'GoogleDataTransport'
          end
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
              target.build_configurations.each do |config|
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
                
                # Fix for Firebase
                if ['Firebase', 'FirebaseCore', 'FirebaseAuth', 'FirebaseMessaging', 'GoogleDataTransport'].include?(target.name)
                  config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                end
              end
            end
          end
          EOL

      - name: Install Pods
        run: |
          cd ios
          rm -rf Pods Podfile.lock
          pod install
          cd ..

      - name: Update project settings
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          cd ios
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:IPHONEOS_DEPLOYMENT_TARGET 13.0" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:DEVELOPMENT_TEAM $TEAM_ID" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:PRODUCT_BUNDLE_IDENTIFIER $BUNDLE_ID" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          plutil -replace MinimumOSVersion -string "13.0" Flutter/AppFrameworkInfo.plist
          cd ..

      - name: Import signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV

      - name: Install provisioning profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          PP_PATH=$RUNNER_TEMP/profile.mobileprovision
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $PP_PATH
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i $PP_PATH))
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          echo "PROVISIONING_PROFILE_SPECIFIER=$UUID" >> $GITHUB_ENV

      - name: Build iOS
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          flutter build ios --release --no-codesign
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            clean archive \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER"

      - name: Export IPA
        env:
          EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}
        run: |
          EXPORT_OPTIONS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode > $EXPORT_OPTIONS_PATH
          
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            -exportOptionsPlist $EXPORT_OPTIONS_PATH \
            -exportPath $RUNNER_TEMP/build

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: release-ipa
          path: ${{ runner.temp }}/build/*.ipa
          retention-days: 5

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: |
            ios/build/
            build/ios/
            ${{ runner.temp }}/Runner.xcarchive/
          retention-days: 5
