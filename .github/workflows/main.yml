name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_ios:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
          cache: true

      - name: Setup environment and verify
        run: |
          # Verify Xcode installation
          echo "Xcode version:"
          xcodebuild -version
          
          # Verify Flutter installation
          echo "\nFlutter version:"
          flutter --version
          
          # Verify cocoapods installation
          echo "\nCocoaPods version:"
          pod --version || sudo gem install cocoapods
          
          # Run Flutter doctor with verbose output
          echo "\nFlutter doctor output:"
          flutter doctor -v
          
          # Pre-download iOS artifacts
          flutter precache --ios
          
          # Clear existing build artifacts
          rm -rf build
          rm -rf ios/Pods
          rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: Create environment files
        env:
          DEV_ENV: ${{ secrets.DEV_ENV_FILE }}
          PROD_ENV: ${{ secrets.PROD_ENV_FILE }}
        run: |
          mkdir -p assets
          echo "$DEV_ENV" > assets/.env.dev
          echo "$PROD_ENV" > assets/.env.prod

      - name: Update Flutter dependencies
        run: |
          # Update pubspec.yaml with pinned versions
          cat << EOF > pubspec.yaml
          name: my_ableaura
          description: "A new Flutter project."
          publish_to: 'none'

          version: 1.0.0+1

          environment:
            sdk: ">=3.5.3 <4.0.0"
            flutter: ">=3.24.4 <4.0.0"

          dependencies:
            flutter:
              sdk: flutter
            http: ^1.1.0
            provider: ^6.1.1
            shared_preferences: ^2.2.2
            intl: ^0.19.0
            firebase_core: ^2.24.2
            firebase_auth: ^4.15.3
            firebase_messaging: ^14.7.10
            url_launcher: ^6.2.2
            geolocator: ^10.1.0
            razorpay_flutter: ^1.3.5
            flutter_dotenv: ^5.1.0
            timeago: ^3.6.0
            flutter_local_notifications: ^16.3.0
            path_provider: ^2.1.2
            flutter_contacts: ^1.1.7+1
            share_plus: ^7.2.1
            permission_handler: ^11.1.0

          dev_dependencies:
            flutter_test:
              sdk: flutter
            flutter_lints: ^3.0.1

          flutter:
            uses-material-design: true
            assets:
              - assets/login_top.jpeg
              - assets/.env.dev
              - assets/.env.prod
          EOF

          # Clean and get dependencies
          flutter clean
          flutter pub get
          flutter pub upgrade --major-versions

      - name: Setup iOS project
        run: |
          # Remove existing iOS folder and recreate
          rm -rf ios
          flutter create --platforms ios --project-name my_ableaura_flutter .
          flutter pub get
          
          # Create Flutter.framework structure
          mkdir -p ios/Flutter
          flutter build ios-framework --xcframework --no-universal
          
          mkdir -p ios/Flutter/Debug
          mkdir -p ios/Flutter/Release
          ln -sf ../../build/ios/framework/Debug/Flutter.xcframework ios/Flutter/Debug/Flutter.framework
          ln -sf ../../build/ios/framework/Release/Flutter.xcframework ios/Flutter/Release/Flutter.framework

      - name: Update Podfile
        run: |
          cat << EOF > ios/Podfile
          # Set platform to iOS 13.0 for Firebase Auth compatibility
          platform :ios, '13.0'
          
          # Disable CocoaPods analytics
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'
          
          # Define versions for better control
          FIREBASE_SDK_VERSION = '10.25.0'
          GOOGLE_DATATRANSPORT_VERSION = '9.3.0'
          
          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release
          }
          
          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            end
          
            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}"
          end
          
          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
          
          flutter_ios_podfile_setup
          
          target 'Runner' do
            use_frameworks!
            use_modular_headers!
            
            # Ensure platform is set for the target
            platform :ios, '13.0'
          
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
            
            # Explicitly specify Firebase dependencies
            pod 'Firebase/Core', FIREBASE_SDK_VERSION
            pod 'Firebase/Auth', FIREBASE_SDK_VERSION
            pod 'Firebase/Messaging', FIREBASE_SDK_VERSION
            pod 'GoogleDataTransport', GOOGLE_DATATRANSPORT_VERSION
            
            # Add other explicit dependencies
            pod 'GoogleUtilities'
            pod 'nanopb'
          end
          
          post_install do |installer|
            # Flutter post-install
            flutter_post_install(installer) if defined?(flutter_post_install)
            
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
              
              target.build_configurations.each do |config|
                # Ensure deployment target
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
                
                # Disable bitcode
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                
                # Add required compiler flags
                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
                  '$(inherited)',
                  'LIBRARY_VERSION=\@\"#{FIREBASE_SDK_VERSION}\"',
                  'COCOAPODS=1',
                  'PB_FIELD_32BIT=1',
                  'PB_NO_PACKED_STRUCTS=1',
                  'PB_ENABLE_MALLOC=1',
                ]
                
                # Fix any arch issues
                config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'i386'
                
                # Disable strict prototypes warning for Firebase
                if ['GoogleDataTransport', 'nanopb', 'FirebaseAuth', 'FirebaseCore', 'FirebaseMessaging'].include?(target.name)
                  config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
                end
              end
            end
          end
          EOF

      - name: Clean CocoaPods and Install
        run: |
          cd ios
          
          # Clean CocoaPods
          rm -rf Pods
          rm -rf Podfile.lock
          pod cache clean --all
          pod deintegrate
          
          # Clean Flutter
          cd ..
          flutter clean
          flutter pub get
          
          # Install CocoaPods
          cd ios
          pod install --repo-update --verbose
          
          # Verify installation
          test -d "Pods" || (echo "Pods directory not found" && exit 1)
          test -f "Podfile.lock" || (echo "Podfile.lock not found" && exit 1)

      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData

      - name: Verify Flutter Setup
        run: |
          cd ios
          # Check Flutter framework
          test -d Flutter/Debug/Flutter.framework || (echo "Flutter framework missing in Debug" && exit 1)
          test -d Flutter/Release/Flutter.framework || (echo "Flutter framework missing in Release" && exit 1)
          # Check config
          test -f Flutter/Generated.xcconfig || (echo "Generated.xcconfig missing" && exit 1)
          # Check Podfile installation
          test -f Podfile.lock || (echo "Podfile.lock missing" && exit 1)
          test -d Pods || (echo "Pods directory missing" && exit 1)

      - name: Update project settings
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          cd ios
          
          # Update project settings
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:IPHONEOS_DEPLOYMENT_TARGET 13.0" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:DEVELOPMENT_TEAM $TEAM_ID" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:PRODUCT_BUNDLE_IDENTIFIER $BUNDLE_ID" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:CODE_SIGN_STYLE Manual" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          
          # Update minimum iOS version
          plutil -replace MinimumOSVersion -string "13.0" Flutter/AppFrameworkInfo.plist
          
          # Verify changes
          echo "Verifying project settings..."
          xcodebuild -showBuildSettings -project Runner.xcodeproj | grep -E "DEVELOPMENT_TEAM|PRODUCT_BUNDLE_IDENTIFIER|IPHONEOS_DEPLOYMENT_TARGET"

      - name: Install provisioning profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          # Create profile
          PP_PATH=$RUNNER_TEMP/profile.mobileprovision
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $PP_PATH
          
          # Extract info
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i $PP_PATH))
          NAME=$(/usr/libexec/PlistBuddy -c "Print Name" /dev/stdin <<< $(security cms -D -i $PP_PATH))
          
          # Install profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
          # Verify installation
          test -f ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision || (echo "Profile not installed" && exit 1)
          
          echo "PROVISIONING_PROFILE_SPECIFIER=$NAME" >> $GITHUB_ENV

      - name: Import signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Setup keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          
          # Add to keychain list
          security list-keychains -d user -s $KEYCHAIN_PATH $(security list-keychains -d user | tr -d '"')
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV

      - name: Build iOS
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
          PROVISIONING_PROFILE_SPECIFIER: ${{ env.PROVISIONING_PROFILE_SPECIFIER }}
          KEYCHAIN_PATH: ${{ env.KEYCHAIN_PATH }}
        run: |
          # First build with Flutter
          flutter build ios --release --no-codesign
          
          # Then build with xcodebuild
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            clean archive \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH"

      - name: Archive and export IPA
        env:
          EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}
        run: |
          # Create export options
          EXPORT_OPTIONS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode > $EXPORT_OPTIONS_PATH
          
          # Export archive
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            -exportOptionsPlist $EXPORT_OPTIONS_PATH \
            -exportPath $RUNNER_TEMP/build
          
          # Verify IPA exists
          test -f $RUNNER_TEMP/build/*.ipa || (echo "IPA not created" && exit 1)

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: release-ipa
          path: ${{ runner.temp }}/build/*.ipa
          retention-days: 5

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: |
            ios/build/
            build/ios/
            ${{ runner.temp }}/Runner.xcarchive/
          retention-days: 5
