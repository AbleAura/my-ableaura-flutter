name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_ios:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Debug project structure
        run: |
          echo "Project root contents:"
          ls -la
          echo "\nProject structure:"
          tree . || find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'

      - name: Create environment files
        env:
          DEV_ENV: ${{ secrets.DEV_ENV_FILE }}
          PROD_ENV: ${{ secrets.PROD_ENV_FILE }}
        run: |
          mkdir -p assets
          echo "$DEV_ENV" > assets/.env.dev
          echo "$PROD_ENV" > assets/.env.prod
          echo "\nEnvironment files created:"
          ls -la assets/
          echo "\nEnvironment file existence check:"
          echo "Dev env file exists: $(test -f assets/.env.dev && echo 'Yes' || echo 'No')"
          echo "Prod env file exists: $(test -f assets/.env.prod && echo 'Yes' || echo 'No')"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
          cache: true

      - name: Check versions
        run: |
          flutter --version
          dart --version
          echo "Pub cache location: $PUB_CACHE"
          echo "Flutter root: $FLUTTER_ROOT"

      - name: Install Flutter dependencies
        run: |
          flutter clean
          flutter pub get
          
      - name: Install CocoaPods
        run: |
          gem install cocoapods
          cd ios && pod install && cd ..

      - name: Debug iOS directory
        run: |
          echo "iOS directory contents:"
          ls -la ios/
          echo "\nPodfile contents:"
          cat ios/Podfile
          echo "\nRunner.xcworkspace contents:"
          ls -la ios/Runner.xcworkspace

      - name: Import signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Debug certificate length (don't log actual content)
          echo "Certificate length: ${#BUILD_CERTIFICATE_BASE64}"
          
          if [ -z "$BUILD_CERTIFICATE_BASE64" ]; then
            echo "Error: BUILD_CERTIFICATE_BASE64 is empty"
            exit 1
          fi
          
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          
          # Verify certificate file was created
          if [ ! -f "$CERTIFICATE_PATH" ]; then
            echo "Error: Certificate file was not created"
            exit 1
          fi
          
          # Show certificate file size (but not content)
          ls -l $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Install provisioning profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          if [ -z "$PROVISIONING_PROFILE_BASE64" ]; then
            echo "Error: PROVISIONING_PROFILE_BASE64 is empty"
            exit 1
          fi
          
          PP_PATH=$RUNNER_TEMP/profile.mobileprovision
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $PP_PATH
          
          # Verify profile was created
          if [ ! -f "$PP_PATH" ]; then
            echo "Error: Provisioning profile file was not created"
            exit 1
          fi
          
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          echo "Provisioning profile installed:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          
          echo "\nBuild output directory contents:"
          ls -la build/ios/

      - name: Archive and export IPA
        env:
          EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}
        run: |
          if [ -z "$EXPORT_OPTIONS_PLIST_BASE64" ]; then
            echo "Error: EXPORT_OPTIONS_PLIST_BASE64 is empty"
            exit 1
          fi
          
          # Create export options plist file
          EXPORT_OPTIONS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo "$EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode > $EXPORT_OPTIONS_PATH
          
          # Verify export options file was created
          if [ ! -f "$EXPORT_OPTIONS_PATH" ]; then
            echo "Error: Export options file was not created"
            exit 1
          fi
          
          echo "Export options file contents (excluding sensitive data):"
          plutil -p $EXPORT_OPTIONS_PATH | grep -v -i key

          # Archive and export
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            archive
          
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            -exportOptionsPlist $EXPORT_OPTIONS_PATH \
            -exportPath $RUNNER_TEMP/build

          echo "\nExported IPA location contents:"
          ls -la $RUNNER_TEMP/build/

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: release-ipa
          path: ${{ runner.temp }}/build/*.ipa
          retention-days: 5

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: |
            ios/build/
            build/ios/
            ${{ runner.temp }}/Runner.xcarchive/
          retention-days: 5
