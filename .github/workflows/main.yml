name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_ios:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Debug project structure
        run: |
          echo "Project root contents:"
          ls -la
          echo "\niOS directory contents:"
          ls -la ios || echo "iOS directory not found"
          echo "\nXcode project existence check:"
          ls -la ios/Runner.xcodeproj || echo "Xcode project not found"

      - name: Create environment files
        env:
          DEV_ENV: ${{ secrets.DEV_ENV_FILE }}
          PROD_ENV: ${{ secrets.PROD_ENV_FILE }}
        run: |
          mkdir -p assets
          echo "$DEV_ENV" > assets/.env.dev
          echo "$PROD_ENV" > assets/.env.prod
          echo "Environment files created successfully"

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
          cache: true

      - name: Check versions and setup
        run: |
          flutter --version
          dart --version
          flutter doctor -v
          xcodebuild -version

      - name: Install Flutter dependencies
        run: |
          flutter clean
          flutter pub get

      - name: Setup Xcode configuration
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          cd ios
          mkdir -p Flutter
          
          # Create Debug.xcconfig
          cat > Flutter/Debug.xcconfig << EOL
          #include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
          #include "Generated.xcconfig"
          DEVELOPMENT_TEAM=$TEAM_ID
          PRODUCT_BUNDLE_IDENTIFIER=$BUNDLE_ID
          EOL
          
          # Create Release.xcconfig
          cat > Flutter/Release.xcconfig << EOL
          #include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
          #include "Generated.xcconfig"
          DEVELOPMENT_TEAM=$TEAM_ID
          PRODUCT_BUNDLE_IDENTIFIER=$BUNDLE_ID
          EOL
          
          echo "Created Xcode configuration files:"
          ls -la Flutter/*.xcconfig
          cd ..

      - name: Clean Pods
        run: |
          cd ios
          rm -rf Pods
          rm -rf Podfile.lock
          pod cache clean --all
          cd ..

      - name: Update Podfile
        run: |
          cd ios
          cat > Podfile << EOL
          platform :ios, '12.0'

          # CocoaPods analytics sends network stats synchronously affecting flutter build latency.
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }

          def flutter_root
            generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
            unless File.exist?(generated_xcode_build_settings_path)
              raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
            end

            File.foreach(generated_xcode_build_settings_path) do |line|
              matches = line.match(/FLUTTER_ROOT\=(.*)/)
              return matches[1].strip if matches
            end
            raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
          end

          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

          flutter_ios_podfile_setup

          target 'Runner' do
            use_frameworks!
            use_modular_headers!

            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
              
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
                config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
                config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
                config.build_settings['CODE_SIGNING_IDENTITY'] = ''
              end
            end
          end
          EOL
          cd ..

      - name: Install CocoaPods
        run: |
          gem install cocoapods
          cd ios
          pod install --repo-update
          cd ..

      - name: Set up Xcode project
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          cd ios
          
          # Update project.pbxproj
          if [ -f "Runner.xcodeproj/project.pbxproj" ]; then
            echo "Updating project.pbxproj..."
            
            # Update deployment target
            plutil -replace objects.\*.buildSettings.IPHONEOS_DEPLOYMENT_TARGET -string "12.0" Runner.xcodeproj/project.pbxproj || true
            
            # Update team ID and bundle ID
            perl -i -pe's/(DEVELOPMENT_TEAM = )"?[^"]*"?/${1}"'$TEAM_ID'"/' Runner.xcodeproj/project.pbxproj
            perl -i -pe's/(PRODUCT_BUNDLE_IDENTIFIER = )"?[^"]*"?/${1}"'$BUNDLE_ID'"/' Runner.xcodeproj/project.pbxproj
            
            echo "Project.pbxproj updated successfully"
          else
            echo "Error: project.pbxproj not found"
            exit 1
          fi
          
          # Update AppFrameworkInfo.plist
          if [ -f "Flutter/AppFrameworkInfo.plist" ]; then
            /usr/libexec/PlistBuddy -c "Set :MinimumOSVersion 12.0" Flutter/AppFrameworkInfo.plist
            echo "Updated MinimumOSVersion in AppFrameworkInfo.plist"
          fi
          
          cd ..

      - name: Import signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Install provisioning profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          PP_PATH=$RUNNER_TEMP/profile.mobileprovision
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $PP_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build iOS
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          # Show build settings before build
          cd ios
          xcodebuild -project Runner.xcodeproj -target Runner -showBuildSettings
          cd ..
          
          # Build
          flutter build ios --release --no-codesign

      - name: Archive and export IPA
        env:
          EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          # Create export options plist
          EXPORT_OPTIONS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo "$EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode > $EXPORT_OPTIONS_PATH
          
          # Archive with explicit team and bundle ID
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            -sdk iphoneos \
            DEVELOPMENT_TEAM=$TEAM_ID \
            PRODUCT_BUNDLE_IDENTIFIER=$BUNDLE_ID \
            archive
          
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            -exportOptionsPlist $EXPORT_OPTIONS_PATH \
            -exportPath $RUNNER_TEMP/build

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: release-ipa
          path: ${{ runner.temp }}/build/*.ipa
          retention-days: 5

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: |
            ios/build/
            build/ios/
            ${{ runner.temp }}/Runner.xcarchive/
          retention-days: 5
