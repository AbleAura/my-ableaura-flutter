name: iOS Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_ios:
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'
          cache: true

      - name: Setup Xcode and Tools
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          xcrun simctl list
          echo "Installing CocoaPods..."
          sudo gem install cocoapods -v 1.15.2

      - name: Setup environment
        run: |
          flutter --version
          flutter doctor -v
          flutter precache --ios

      - name: Create environment files
        env:
          DEV_ENV: ${{ secrets.DEV_ENV_FILE }}
          PROD_ENV: ${{ secrets.PROD_ENV_FILE }}
        run: |
          mkdir -p assets
          echo "$DEV_ENV" > assets/.env.dev
          echo "$PROD_ENV" > assets/.env.prod

      - name: Clean project
        run: |
          rm -rf ios/Pods
          rm -rf ios/Podfile.lock
          rm -rf ios/.symlinks
          rm -rf ios/Flutter/Flutter.podspec
          rm -rf ~/Library/Developer/Xcode/DerivedData
          flutter clean

      - name: Create temporary Flutter project
        run: |
          # First, save current pubspec.yaml
          cp pubspec.yaml pubspec.yaml.bak
          
          # Create temporary pubspec with valid name
          cat > pubspec.yaml << 'EOL'
          name: my_ableaura_flutter
          description: "A new Flutter project."
          publish_to: 'none'

          version: 1.0.0+1

          environment:
            sdk: ">=3.5.3 <4.0.0"
            flutter: ">=3.24.4 <4.0.0"

          dependencies:
            flutter:
              sdk: flutter
          EOL
          
          # Remove and recreate iOS project
          rm -rf ios
          flutter create --platforms=ios .
          
          # Restore original pubspec
          mv pubspec.yaml.bak pubspec.yaml

      - name: Update Flutter dependencies
        run: |
          cat > pubspec.yaml << 'EOL'
          name: my_ableaura_flutter
          description: "A new Flutter project."
          publish_to: 'none'
          version: 1.0.0+1

          environment:
            sdk: ">=3.5.3 <4.0.0"
            flutter: ">=3.24.4 <4.0.0"
          dependencies:
            flutter:
              sdk: flutter
            firebase_core: ^2.24.2
            firebase_auth: ^4.15.3
            firebase_messaging: ^14.7.10
            flutter_local_notifications: ^16.3.0
            geolocator: ^10.1.0
            http: ^1.1.0
            provider: ^6.1.1
            razorpay_flutter: ^1.3.5
            shared_preferences: ^2.2.2
            url_launcher: ^6.2.2
            permission_handler: ^11.1.0
            flutter_dotenv: ^5.1.0

          dev_dependencies:
            flutter_test:
              sdk: flutter
            flutter_lints: ^3.0.1

          flutter:
            uses-material-design: true
            assets:
              - assets/
              - assets/.env.dev
              - assets/.env.prod
          EOL

          flutter pub get
          flutter pub upgrade --major-versions

      - name: Update Podfile
        run: |
          cat > ios/Podfile << 'EOL'
          platform :ios, '13.0'

          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

          flutter_ios_podfile_setup

          target 'Runner' do
            use_frameworks!
            use_modular_headers!
            
            platform :ios, '13.0'
            
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

            pod 'FirebaseCore'
            pod 'FirebaseAuth'
            pod 'FirebaseMessaging'
            pod 'GoogleDataTransport'
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
              
              target.build_configurations.each do |config|
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
                
                # Required build flags
                config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
                  '$(inherited)',
                  'COCOAPODS=1',
                  'PB_FIELD_32BIT=1',
                  'PB_NO_PACKED_STRUCTS=1',
                  'PB_ENABLE_MALLOC=1',
                ]
                
                # Architecture settings
                config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'i386'
                
                # Disable strict prototypes warning for Firebase
                if ['FirebaseAuth', 'FirebaseCore', 'FirebaseMessaging', 'GoogleDataTransport'].include?(target.name)
                  config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
                end
              end
            end
          end
          EOL

      - name: Install Pods
        run: |
          cd ios
          pod repo update
          pod install --repo-update
          cd ..

      - name: Update iOS deployment target
        run: |
          cd ios
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:IPHONEOS_DEPLOYMENT_TARGET 13.0" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          plutil -replace MinimumOSVersion -string "13.0" Flutter/AppFrameworkInfo.plist
          cd ..

      - name: Configure Xcode project
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          cd ios
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:DEVELOPMENT_TEAM $TEAM_ID" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:PRODUCT_BUNDLE_IDENTIFIER $BUNDLE_ID" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:CODE_SIGN_STYLE Manual" "Runner.xcodeproj/project.pbxproj" 2>/dev/null || true
          cd ..

      - name: Import signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV

      - name: Install provisioning profile
        env:
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        run: |
          PP_PATH=$RUNNER_TEMP/profile.mobileprovision
          echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode > $PP_PATH
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i $PP_PATH))
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          echo "PROVISIONING_PROFILE_SPECIFIER=$UUID" >> $GITHUB_ENV

      - name: Build iOS
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
        run: |
          flutter build ios --release --no-codesign
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            clean archive \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER"

      - name: Export IPA
        env:
          EXPORT_OPTIONS_PLIST_BASE64: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}
        run: |
          EXPORT_OPTIONS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST_BASE64" | base64 --decode > $EXPORT_OPTIONS_PATH
          
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/Runner.xcarchive \
            -exportOptionsPlist $EXPORT_OPTIONS_PATH \
            -exportPath $RUNNER_TEMP/build

      - name: Upload IPA
        uses: actions/upload-artifact@v3
        with:
          name: release-ipa
          path: ${{ runner.temp }}/build/*.ipa
          retention-days: 5

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-logs
          path: |
            ios/build/
            build/ios/
            ${{ runner.temp }}/Runner.xcarchive/
          retention-days: 5
